package m115

var (
	// Pre-calculated key data
	xorKeySeed = []byte{
		0xf0, 0xe5, 0x69, 0xae, 0xbf, 0xdc, 0xbf, 0x5a,
		0x1a, 0x45, 0xe8, 0xbe, 0x7d, 0xa6, 0x73, 0x88,
		0xde, 0x8f, 0xe7, 0xc4, 0x45, 0xda, 0x86, 0x94,
		0x9b, 0x69, 0x92, 0x0b, 0x6a, 0xb8, 0xf1, 0x7a,
		0x38, 0x06, 0x3c, 0x95, 0x26, 0x6d, 0x2c, 0x56,
		0x00, 0x70, 0x56, 0x9c, 0x36, 0x38, 0x62, 0x76,
		0x2f, 0x9b, 0x5f, 0x0f, 0xf2, 0xfe, 0xfd, 0x2d,
		0x70, 0x9c, 0x86, 0x44, 0x8f, 0x3d, 0x14, 0x27,
		0x71, 0x93, 0x8a, 0xe4, 0x0e, 0xc1, 0x48, 0xae,
		0xdc, 0x34, 0x7f, 0xcf, 0xfe, 0xb2, 0x7f, 0xf6,
		0x55, 0x9a, 0x46, 0xc8, 0xeb, 0x37, 0x77, 0xa4,
		0xe0, 0x6b, 0x72, 0x93, 0x7e, 0x51, 0xcb, 0xf1,
		0x37, 0xef, 0xad, 0x2a, 0xde, 0xee, 0xf9, 0xc9,
		0x39, 0x6b, 0x32, 0xa1, 0xba, 0x35, 0xb1, 0xb8,
		0xbe, 0xda, 0x78, 0x73, 0xf8, 0x20, 0xd5, 0x27,
		0x04, 0x5a, 0x6f, 0xfd, 0x5e, 0x72, 0x39, 0xcf,
		0x3b, 0x9c, 0x2b, 0x57, 0x5c, 0xf9, 0x7c, 0x4b,
		0x7b, 0xd2, 0x12, 0x66, 0xcc, 0x77, 0x09, 0xa6,
	}

	xorKey = []byte{
		0x42, 0xda, 0x13, 0xba, 0x78, 0x76, 0x8d, 0x37,
		0xe8, 0xee, 0x04, 0x91,
	}
)

func XorGetKey(key []byte, size int) []byte {
	result := make([]byte, size)
	if key == nil {
		copy(result, xorKey)
	} else {
		for i := 0; i < size; i++ {
			result[i] = ((key[i] + xorKeySeed[size*i]) & 0xff) ^ xorKeySeed[size-i-i]
		}
	}
	return result
}

func XorTransform(data []byte, key []byte) {
	dataSize, keySize := len(data), len(key)
	mod := dataSize % 4
	if mod != 0 {
		for i := 0; i < mod; i++ {
			data[i] ^= key[i%keySize]
		}
	}
	for i := mod; i < dataSize; i++ {
		data[i] ^= key[(i-mod)%keySize]
	}
}
